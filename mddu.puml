@startuml
left to right direction

'*--- State Machine ---*
namespace state_machine.h{
enum StateEnum {
    Off
    Disable
    Enable
    Error
    StateEnum TransitionMap(curr, next)
}

class StateEntity {
    StateFuncPtr func_on_enter
    StateFuncPtr func_on_run
    StateFuncPtr func_on_exit
    StateEntity CreateEntity(enter, run, exit)
}

class StateMachine {
    StateEnum currnet_state
    StateEnum previous_state
    StateFuncPtr active_state_func
    StateEntity entity[n_states]
    void Init(void)
    void Run(void)
    void StateTransition(next)
}
' StateMachine <-- StateEnum
' StateMachine <-- StateEntity
StateEnum   --> StateMachine
StateEntity --> StateMachine
}


'*--- Drive Routine ---*
namespace drive_routine.h{
class RoutineEntity {
    string routine_name
    RoutineFuncPtr func
    RoutineEntity CreateEntity(name, func)
}

class DriveRoutine {
    int active_routine_id
    size_t n_active_routines
    RoutineFuncPtr entity[max_routines]
    StateEntityStruct entity[n_states]
    void Init(void)
    void Run(void)
    void ClearDriveRoutines(void)
    int PushDriveRoutine(id)
}

' DriveRoutine <-- RoutineEntity
RoutineEntity --> DriveRoutine
}


'*--- Device ---*
namespace devices.h{
class Device {
    int device_id
    string device_name
    StateMachine state_machine
    DriveRoutine drive_routine
    void InitDevice(void)
    void RunDevice(void)
    void SetDeviceStateEntity(state, entity)
    void SetDeviceRoutineEntity(id, entity)
}

' Device <-- state_machine.h.StateMachine
' Device <-- drive_routine.h.DriveRoutine
state_machine.h.StateMachine --> Device
drive_routine.h.DriveRoutine --> Device
}


'*--- Device Instance ---*
object ETH_Device {
    ETH_Init()
    ETH_Run()
}
object UART_Device {
    UART_Init()
    UART_Run()
}
object Other_Device_Instances {
    Init()
    Run()
}

devices.h.Device --|> ETH_Device
devices.h.Device --|> UART_Device
devices.h.Device --|> Other_Device_Instances

@enduml
